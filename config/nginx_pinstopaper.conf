upstream pinstopaper_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/tmp/pinstopaper.sock fail_timeout=0;
}

server {
  listen 80;
  server_name pinstopaper.mattschallert.com;
  rewrite ^ https://pinstopaper.schallert.io permanent;
}

server {
  listen 80;
  server_name pinstopaper.schallert.io;
  rewrite ^ https://pinstopaper.schallert.io$request_uri? permanent;
}

server {

  listen 443 ssl spdy;
  server_name pinstopaper.schallert.io;

  # ======== BEGIN SSL CONF ========

  ssl on;
  ssl_certificate /etc/ssl/certs/pinstopaper.schallert.io.ssl-bundle.crt;
  ssl_certificate_key /etc/ssl/private/pinstopaper.schallert.io.key;

  # Prefer certain ciphersuites, to enforce Forward Secrecy and avoid known vulnerabilities.
  #
  # Forces forward secrecy in all browsers and clients that can use TLS,
  # but with a small exception (DES-CBC3-SHA) for IE8/XP users.
  #
  # Reference client: https://www.ssllabs.com/ssltest/analyze.html
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED';

  # Cut out the old, broken, insecure SSLv2 and SSLv3 entirely.
  ssl_protocols TLSv1.2 TLSv1.1 TLSv1;

  # Turn on session resumption, using a 10 min cache shared across nginx processes,
  # as recommended by http://nginx.org/en/docs/http/configuring_https_servers.html
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 10m;
  keepalive_timeout   70;

  # Buffer size of 1400 bytes fits in one MTU.
  # nginx 1.5.9+ ONLY
  ssl_buffer_size 1400;

  # SPDY header compression (0 for none, 9 for slow/heavy compression). Preferred is 6.
  #
  # BUT: header compression is flawed and vulnerable in SPDY versions 1 - 3.
  # Disable with 0, until using a version of nginx with SPDY 4.
  spdy_headers_comp 0;

  # Now let's really get fancy, and pre-generate a 2048 bit random parameter
  # for DH elliptic curves. If not created and specified, default is only 1024 bits.
  #
  # Generated by OpenSSL with the following command:
  #   openssl dhparam -outform pem -out dhparam2048.pem 2048
  ssl_dhparam /etc/ssl/dhparam2048.pem;

  # ======== END SSL CONF ========

  access_log /var/log/nginx/pinstopaper.access.log;
  error_log /var/log/nginx/pinstopaper.error.log;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  # keepalive_timeout 5;

  # path for static files
  root /opt/pinstopaper/current/public;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time.  Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # Ignore the NewRelic pinger agent so we don't flood the logs
    if ($http_user_agent ~ (NewRelicPinger) ) {
      access_log off;
    }

    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;

    proxy_pass http://pinstopaper_server;
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /opt/pinstopaper/public;
  }

  location ~ ^/(assets)/ {
    gzip_static on;
    expires     max;
    add_header  Cache-Control public;
  }
}
